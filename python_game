import pygame
import random
import os

pygame.init()
screen_width=1200
screen_height=600
#colors
white=(255,255,255)
red=(255,0,0)
black=(0,0,0)
green=(0,255,0)
#pygame.diaplay
game_window=pygame.display.set_mode((600,400))
pygame.display.set_caption("Snake game")
pygame.display.update()

snk_list=[]
snk_len=1
clock=pygame.time.Clock()
font=pygame.font.SysFont(None,55)

def text_screen(text,colour,x,y):
    screen_text=font.render(text,True,colour)#to adjust resolution
    game_window.blit(screen_text,(x,y))#to update text
def plot_snake(game_window,black,snk_list,snake_size):
    for x,y in snk_list:
        pygame.draw.rect(game_window,black,[x,y,snake_size,snake_size])
def welcome():
    game_exit=False
    while not game_exit:
        game_window.fill((90,5,100))
        text_screen("Welcome to Snakes",black,20,150)
        text_screen("press space bar to play",black,30,200)
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                game_exit=True
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_SPACE:
                    gameloop()
        pygame.display.update()
        clock.tick(30)
        
        
#game loop
def gameloop():
    #game variables
    game_exit=False
    game_quit=False
    snake_x=45
    snake_y=50
    snake_size=20
    velocity_x=0
    velocity_y=0
    init_velocity=2
    food_x=random.randint(20,600//2)
    food_y=random.randint(20,400//2)
    score=0
    fps=30
    snk_list=[]
    snk_len=1
    

            
        #gameloop
    while not game_exit:
        if game_quit:
            
            game_window.fill(black)
            text_screen("game over! press enter to continue",red,30,200)

            for event in pygame.event.get():
                if event.type==pygame.QUIT:
                    game_exit=True
                if event.type==pygame.KEYDOWN:
                    if event.key==pygame.K_RETURN:
                        gameloop()
        else:
            for event in pygame.event.get():
                if event.type==pygame.QUIT:
                    game_exit=True
            
                if event.type==pygame.KEYDOWN:
                    if event.key==pygame.K_RIGHT:
                        velocity_x=init_velocity
                        velocity_y=0
                    if event.key==pygame.K_LEFT:
                        velocity_x=-init_velocity
                        velocity_y=0
                    if event.key==pygame.K_UP:
                        velocity_y=-init_velocity
                
                        velocity_x=0
                    if event.key==pygame.K_DOWN:
                        velocity_y=init_velocity
                    if event.key==pygame.K_m:
                        score=score+5
                
                        velocity_x=0
            snake_x=snake_x+velocity_x
            snake_y=snake_y+velocity_y
            if abs(snake_x-food_x)<15 and abs(snake_y-food_y)<15:
                score=score+1
                #text_screen("score:"+str(score*10),red,5,5)
                food_x=random.randint(20,600//2)
                food_y=random.randint(20,400//2)
                snk_len+=5
                
            head=[]
            head.append(snake_x)
            head.append(snake_y)
            snk_list.append(head)
            if len(snk_list)>snk_len:
               del snk_list[0]
               #conditions lose
            if head in snk_list[:-1]:
                game_quit=True
                #conditions to lose 
            if snake_x<0 or snake_x>600 or snake_y<0 or snake_y>400:
               game_quit=True
        
            game_window.fill(black)
    #score
            text_screen("score:"+str(score*10),red,5,5)
    #food
            plot_snake(game_window,red,snk_list,snake_size)
            pygame.draw.rect(game_window,green,[food_x,food_y,snake_size,snake_size])
    #to make head
            pygame.draw.rect(game_window,red,[snake_x,snake_y,snake_size,snake_size])
        pygame.display.update()
        clock.tick(fps)

    pygame.quit()
    quit()
welcome()      

    
